name: Deploy Flask App to EC2

on:
  push:
    branches:
      - test  # Asegúrate de que el flujo de trabajo se ejecute en la rama correcta

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v3

    # Paso para instalar dependencias de Python necesarias (como python3-venv)
    - name: Install Python3 venv
      run: sudo apt-get update && sudo apt-get install python3.12-venv

    # Desplegar en EC2
    - name: Deploy to EC2
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        REMOTE_HOST: ${{ secrets.HOST_DNS_IPV4 }}
        REMOTE_USER: ${{ secrets.EC2_USER }}
        TARGET: ${{ secrets.TARGET_DIR }}

    # Ejecutar comandos remotos en EC2
    - name: Executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST_DNS_IPV4 }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Navegar al directorio donde se encuentra el proyecto
          cd ${{ secrets.TARGET_DIR }}

          # Hacer pull del repositorio para asegurarnos de que estamos actualizados
          git pull origin main

          # Verificar si ya existe un entorno virtual y si no, crearlo
          if [ ! -d "venv" ]; then
            python3 -m venv venv  # Crear el entorno virtual
          fi
          source venv/bin/activate  # Activar el entorno virtual

          # Instalar dependencias desde requirements.txt
          pip install -r requirements.txt

          # Cerrar procesos Flask anteriores si existen
          pkill -f "flask run" || echo "No previous Flask processes running."

          # Ejecutar la aplicación Flask en segundo plano en el puerto 80
          nohup flask run --host=0.0.0.0 --port=80 > flask_output.log 2>&1 &

          echo "Flask application is running in the background."
